# 请求定义部分，定义了一个请求需要的参数，这里定义了三个参数：sub（主体，通常是用户）、obj（对象，通常是资源）和act（动作，如读取、写入等）
[request_definition]
r = sub, obj, act

# 策略定义部分，定义了一个策略需要的参数，这里定义了三个参数：sub、obj和act，与请求定义相同
[policy_definition]
p = sub, obj, act

# 角色定义部分，定义了角色的继承关系，这里使用了两个参数，表示一个用户可以拥有一个角色
[role_definition]
g = _, _

# 策略效力部分，定义了当多个策略匹配时如何决定最终结果，这里使用了“some(where (p.eft == allow))”，表示只要有一个策略允许，就允许请求
[policy_effect]
e = some(where (p.eft == allow))

# 匹配器部分，定义了如何从请求和策略中提取参数，并判断是否匹配，这里使用了“g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act”，表示请求的主体必须拥有策略的主体角色，且对象和动作必须完全匹配
[matchers]
m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act || r.sub == "admin"